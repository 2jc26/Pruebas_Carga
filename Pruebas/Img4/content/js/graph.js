/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 226.0, "minX": 0.0, "maxY": 62348.0, "series": [{"data": [[0.0, 226.0], [0.1, 247.0], [0.2, 5246.0], [0.3, 5246.0], [0.4, 5280.0], [0.5, 5283.0], [0.6, 5285.0], [0.7, 5285.0], [0.8, 5285.0], [0.9, 5285.0], [1.0, 5288.0], [1.1, 5290.0], [1.2, 5290.0], [1.3, 5295.0], [1.4, 5295.0], [1.5, 5297.0], [1.6, 5298.0], [1.7, 5301.0], [1.8, 5303.0], [1.9, 5312.0], [2.0, 5313.0], [2.1, 5314.0], [2.2, 5317.0], [2.3, 5318.0], [2.4, 5318.0], [2.5, 5320.0], [2.6, 5320.0], [2.7, 5323.0], [2.8, 5323.0], [2.9, 5326.0], [3.0, 5326.0], [3.1, 5327.0], [3.2, 5328.0], [3.3, 5329.0], [3.4, 5330.0], [3.5, 5333.0], [3.6, 5334.0], [3.7, 5335.0], [3.8, 5335.0], [3.9, 5337.0], [4.0, 5337.0], [4.1, 5340.0], [4.2, 5344.0], [4.3, 5352.0], [4.4, 5354.0], [4.5, 5354.0], [4.6, 5354.0], [4.7, 5360.0], [4.8, 5360.0], [4.9, 5363.0], [5.0, 5364.0], [5.1, 5365.0], [5.2, 5366.0], [5.3, 5367.0], [5.4, 5367.0], [5.5, 5368.0], [5.6, 5368.0], [5.7, 5368.0], [5.8, 5375.0], [5.9, 5375.0], [6.0, 5377.0], [6.1, 5384.0], [6.2, 5385.0], [6.3, 5388.0], [6.4, 5389.0], [6.5, 5390.0], [6.6, 5391.0], [6.7, 5391.0], [6.8, 5391.0], [6.9, 5392.0], [7.0, 5393.0], [7.1, 5393.0], [7.2, 5393.0], [7.3, 5394.0], [7.4, 5394.0], [7.5, 5395.0], [7.6, 5396.0], [7.7, 5397.0], [7.8, 5398.0], [7.9, 5399.0], [8.0, 5402.0], [8.1, 5402.0], [8.2, 5405.0], [8.3, 5405.0], [8.4, 5405.0], [8.5, 5410.0], [8.6, 5412.0], [8.7, 5412.0], [8.8, 5413.0], [8.9, 5414.0], [9.0, 5417.0], [9.1, 5429.0], [9.2, 5429.0], [9.3, 5431.0], [9.4, 5432.0], [9.5, 5437.0], [9.6, 5440.0], [9.7, 5441.0], [9.8, 5443.0], [9.9, 5447.0], [10.0, 5448.0], [10.1, 5448.0], [10.2, 5448.0], [10.3, 5449.0], [10.4, 5449.0], [10.5, 5450.0], [10.6, 5451.0], [10.7, 5452.0], [10.8, 5453.0], [10.9, 5454.0], [11.0, 5454.0], [11.1, 5455.0], [11.2, 5456.0], [11.3, 5458.0], [11.4, 5459.0], [11.5, 5459.0], [11.6, 5460.0], [11.7, 5460.0], [11.8, 5462.0], [11.9, 5488.0], [12.0, 9050.0], [12.1, 9054.0], [12.2, 9056.0], [12.3, 9092.0], [12.4, 9094.0], [12.5, 9096.0], [12.6, 9098.0], [12.7, 9098.0], [12.8, 9100.0], [12.9, 9101.0], [13.0, 9102.0], [13.1, 9113.0], [13.2, 9140.0], [13.3, 9144.0], [13.4, 9145.0], [13.5, 9146.0], [13.6, 11154.0], [13.7, 11160.0], [13.8, 11161.0], [13.9, 11161.0], [14.0, 11172.0], [14.1, 11175.0], [14.2, 11179.0], [14.3, 11179.0], [14.4, 11181.0], [14.5, 11182.0], [14.6, 11182.0], [14.7, 11184.0], [14.8, 11186.0], [14.9, 11214.0], [15.0, 11214.0], [15.1, 11217.0], [15.2, 11218.0], [15.3, 11219.0], [15.4, 11221.0], [15.5, 11223.0], [15.6, 11224.0], [15.7, 11226.0], [15.8, 11227.0], [15.9, 11227.0], [16.0, 11229.0], [16.1, 11235.0], [16.2, 11235.0], [16.3, 11236.0], [16.4, 11237.0], [16.5, 11239.0], [16.6, 11240.0], [16.7, 11244.0], [16.8, 11246.0], [16.9, 11247.0], [17.0, 11253.0], [17.1, 11254.0], [17.2, 11255.0], [17.3, 11256.0], [17.4, 11259.0], [17.5, 11260.0], [17.6, 11260.0], [17.7, 11263.0], [17.8, 11264.0], [17.9, 11264.0], [18.0, 11266.0], [18.1, 11266.0], [18.2, 11266.0], [18.3, 11267.0], [18.4, 11268.0], [18.5, 11268.0], [18.6, 11268.0], [18.7, 11270.0], [18.8, 11270.0], [18.9, 11271.0], [19.0, 11271.0], [19.1, 11273.0], [19.2, 11274.0], [19.3, 11275.0], [19.4, 11276.0], [19.5, 11279.0], [19.6, 11281.0], [19.7, 11303.0], [19.8, 11336.0], [19.9, 11336.0], [20.0, 11370.0], [20.1, 11420.0], [20.2, 11421.0], [20.3, 11421.0], [20.4, 11423.0], [20.5, 11423.0], [20.6, 11425.0], [20.7, 11425.0], [20.8, 11426.0], [20.9, 11428.0], [21.0, 11431.0], [21.1, 11432.0], [21.2, 11432.0], [21.3, 11433.0], [21.4, 11433.0], [21.5, 11436.0], [21.6, 14042.0], [21.7, 14044.0], [21.8, 14044.0], [21.9, 14045.0], [22.0, 14047.0], [22.1, 14049.0], [22.2, 14059.0], [22.3, 14059.0], [22.4, 14061.0], [22.5, 14062.0], [22.6, 14063.0], [22.7, 14066.0], [22.8, 14066.0], [22.9, 14067.0], [23.0, 14068.0], [23.1, 14070.0], [23.2, 14071.0], [23.3, 14071.0], [23.4, 14073.0], [23.5, 14073.0], [23.6, 14110.0], [23.7, 16756.0], [23.8, 16757.0], [23.9, 16769.0], [24.0, 16769.0], [24.1, 16771.0], [24.2, 16771.0], [24.3, 16772.0], [24.4, 16773.0], [24.5, 16777.0], [24.6, 16780.0], [24.7, 16780.0], [24.8, 16781.0], [24.9, 16782.0], [25.0, 16783.0], [25.1, 16810.0], [25.2, 16831.0], [25.3, 16856.0], [25.4, 16859.0], [25.5, 16860.0], [25.6, 16860.0], [25.7, 16864.0], [25.8, 16865.0], [25.9, 16872.0], [26.0, 16876.0], [26.1, 16876.0], [26.2, 16877.0], [26.3, 16878.0], [26.4, 16882.0], [26.5, 16882.0], [26.6, 16883.0], [26.7, 16884.0], [26.8, 16885.0], [26.9, 16886.0], [27.0, 16887.0], [27.1, 16889.0], [27.2, 16890.0], [27.3, 16923.0], [27.4, 16929.0], [27.5, 16965.0], [27.6, 16967.0], [27.7, 16968.0], [27.8, 16968.0], [27.9, 16971.0], [28.0, 16971.0], [28.1, 16971.0], [28.2, 16973.0], [28.3, 16975.0], [28.4, 16975.0], [28.5, 16977.0], [28.6, 16980.0], [28.7, 16981.0], [28.8, 16983.0], [28.9, 16984.0], [29.0, 16984.0], [29.1, 16985.0], [29.2, 17023.0], [29.3, 19570.0], [29.4, 19570.0], [29.5, 19573.0], [29.6, 19575.0], [29.7, 19607.0], [29.8, 19609.0], [29.9, 19688.0], [30.0, 19690.0], [30.1, 19692.0], [30.2, 19693.0], [30.3, 19694.0], [30.4, 19696.0], [30.5, 19696.0], [30.6, 19698.0], [30.7, 19698.0], [30.8, 19700.0], [30.9, 19703.0], [31.0, 19795.0], [31.1, 19901.0], [31.2, 19903.0], [31.3, 19906.0], [31.4, 19906.0], [31.5, 19958.0], [31.6, 19963.0], [31.7, 20078.0], [31.8, 20079.0], [31.9, 20100.0], [32.0, 20169.0], [32.1, 20346.0], [32.2, 20562.0], [32.3, 20568.0], [32.4, 20694.0], [32.5, 20759.0], [32.6, 20760.0], [32.7, 20767.0], [32.8, 20780.0], [32.9, 20781.0], [33.0, 20781.0], [33.1, 20781.0], [33.2, 20782.0], [33.3, 20783.0], [33.4, 20784.0], [33.5, 20785.0], [33.6, 20786.0], [33.7, 20787.0], [33.8, 20790.0], [33.9, 24155.0], [34.0, 24172.0], [34.1, 24219.0], [34.2, 24224.0], [34.3, 24224.0], [34.4, 24225.0], [34.5, 24225.0], [34.6, 24228.0], [34.7, 24235.0], [34.8, 24235.0], [34.9, 24237.0], [35.0, 24237.0], [35.1, 24238.0], [35.2, 24240.0], [35.3, 24258.0], [35.4, 24258.0], [35.5, 24259.0], [35.6, 24260.0], [35.7, 24261.0], [35.8, 24262.0], [35.9, 24312.0], [36.0, 24317.0], [36.1, 24317.0], [36.2, 24318.0], [36.3, 24319.0], [36.4, 24321.0], [36.5, 24322.0], [36.6, 24322.0], [36.7, 24323.0], [36.8, 24324.0], [36.9, 24324.0], [37.0, 24326.0], [37.1, 24335.0], [37.2, 24339.0], [37.3, 24348.0], [37.4, 24349.0], [37.5, 24351.0], [37.6, 24351.0], [37.7, 24355.0], [37.8, 24358.0], [37.9, 24360.0], [38.0, 24365.0], [38.1, 24366.0], [38.2, 24366.0], [38.3, 24367.0], [38.4, 24367.0], [38.5, 24369.0], [38.6, 24371.0], [38.7, 24372.0], [38.8, 24375.0], [38.9, 24376.0], [39.0, 24414.0], [39.1, 24414.0], [39.2, 24416.0], [39.3, 24417.0], [39.4, 24417.0], [39.5, 24419.0], [39.6, 24420.0], [39.7, 24422.0], [39.8, 24423.0], [39.9, 24428.0], [40.0, 24429.0], [40.1, 24429.0], [40.2, 24430.0], [40.3, 24440.0], [40.4, 25423.0], [40.5, 25426.0], [40.6, 25426.0], [40.7, 25427.0], [40.8, 25428.0], [40.9, 25429.0], [41.0, 25430.0], [41.1, 25431.0], [41.2, 25653.0], [41.3, 25656.0], [41.4, 25658.0], [41.5, 25659.0], [41.6, 25659.0], [41.7, 25660.0], [41.8, 25661.0], [41.9, 25661.0], [42.0, 25661.0], [42.1, 25662.0], [42.2, 25662.0], [42.3, 25662.0], [42.4, 25662.0], [42.5, 25662.0], [42.6, 25663.0], [42.7, 25664.0], [42.8, 25664.0], [42.9, 25666.0], [43.0, 25667.0], [43.1, 25667.0], [43.2, 25670.0], [43.3, 25672.0], [43.4, 25673.0], [43.5, 25674.0], [43.6, 25675.0], [43.7, 25678.0], [43.8, 25678.0], [43.9, 25699.0], [44.0, 25704.0], [44.1, 25704.0], [44.2, 25704.0], [44.3, 25705.0], [44.4, 25707.0], [44.5, 25707.0], [44.6, 25713.0], [44.7, 25714.0], [44.8, 25716.0], [44.9, 25718.0], [45.0, 25719.0], [45.1, 25916.0], [45.2, 25917.0], [45.3, 25919.0], [45.4, 25923.0], [45.5, 25927.0], [45.6, 25927.0], [45.7, 25928.0], [45.8, 25928.0], [45.9, 25929.0], [46.0, 25930.0], [46.1, 25936.0], [46.2, 25941.0], [46.3, 25942.0], [46.4, 25954.0], [46.5, 26064.0], [46.6, 26066.0], [46.7, 26066.0], [46.8, 26067.0], [46.9, 26068.0], [47.0, 26069.0], [47.1, 26070.0], [47.2, 26071.0], [47.3, 26071.0], [47.4, 26073.0], [47.5, 26075.0], [47.6, 26076.0], [47.7, 26077.0], [47.8, 26077.0], [47.9, 26079.0], [48.0, 26080.0], [48.1, 26081.0], [48.2, 26947.0], [48.3, 26948.0], [48.4, 26952.0], [48.5, 26952.0], [48.6, 26955.0], [48.7, 26955.0], [48.8, 26961.0], [48.9, 26961.0], [49.0, 26964.0], [49.1, 26966.0], [49.2, 27196.0], [49.3, 27198.0], [49.4, 27199.0], [49.5, 27201.0], [49.6, 27201.0], [49.7, 27279.0], [49.8, 27291.0], [49.9, 27301.0], [50.0, 27321.0], [50.1, 29428.0], [50.2, 29449.0], [50.3, 29450.0], [50.4, 29451.0], [50.5, 29452.0], [50.6, 29455.0], [50.7, 29507.0], [50.8, 29508.0], [50.9, 29637.0], [51.0, 29647.0], [51.1, 29649.0], [51.2, 29649.0], [51.3, 29650.0], [51.4, 29651.0], [51.5, 29651.0], [51.6, 29652.0], [51.7, 29653.0], [51.8, 29654.0], [51.9, 29654.0], [52.0, 29654.0], [52.1, 29657.0], [52.2, 29657.0], [52.3, 29657.0], [52.4, 29658.0], [52.5, 29659.0], [52.6, 29660.0], [52.7, 29661.0], [52.8, 29661.0], [52.9, 29662.0], [53.0, 29663.0], [53.1, 29663.0], [53.2, 29664.0], [53.3, 29664.0], [53.4, 29666.0], [53.5, 29670.0], [53.6, 29672.0], [53.7, 29679.0], [53.8, 29772.0], [53.9, 29772.0], [54.0, 29773.0], [54.1, 29774.0], [54.2, 29776.0], [54.3, 29838.0], [54.4, 29864.0], [54.5, 29864.0], [54.6, 29866.0], [54.7, 29866.0], [54.8, 29867.0], [54.9, 29868.0], [55.0, 29869.0], [55.1, 29870.0], [55.2, 29870.0], [55.3, 29870.0], [55.4, 29871.0], [55.5, 29872.0], [55.6, 29878.0], [55.7, 29879.0], [55.8, 29880.0], [55.9, 29880.0], [56.0, 29882.0], [56.1, 29895.0], [56.2, 29901.0], [56.3, 29904.0], [56.4, 29907.0], [56.5, 30137.0], [56.6, 30138.0], [56.7, 30138.0], [56.8, 30139.0], [56.9, 30141.0], [57.0, 30141.0], [57.1, 30142.0], [57.2, 30142.0], [57.3, 30143.0], [57.4, 30144.0], [57.5, 30145.0], [57.6, 30178.0], [57.7, 33280.0], [57.8, 33282.0], [57.9, 33282.0], [58.0, 33282.0], [58.1, 33354.0], [58.2, 33366.0], [58.3, 33367.0], [58.4, 33368.0], [58.5, 33370.0], [58.6, 33376.0], [58.7, 33377.0], [58.8, 34905.0], [58.9, 35274.0], [59.0, 35344.0], [59.1, 35345.0], [59.2, 35346.0], [59.3, 35347.0], [59.4, 35348.0], [59.5, 35350.0], [59.6, 35350.0], [59.7, 35351.0], [59.8, 35353.0], [59.9, 35353.0], [60.0, 35353.0], [60.1, 35354.0], [60.2, 35357.0], [60.3, 35357.0], [60.4, 35358.0], [60.5, 35359.0], [60.6, 35359.0], [60.7, 35360.0], [60.8, 35360.0], [60.9, 35361.0], [61.0, 35361.0], [61.1, 35362.0], [61.2, 35363.0], [61.3, 35365.0], [61.4, 35366.0], [61.5, 35366.0], [61.6, 35367.0], [61.7, 35368.0], [61.8, 35375.0], [61.9, 35415.0], [62.0, 35469.0], [62.1, 35608.0], [62.2, 35609.0], [62.3, 35609.0], [62.4, 35610.0], [62.5, 35612.0], [62.6, 35612.0], [62.7, 35612.0], [62.8, 35619.0], [62.9, 35621.0], [63.0, 35622.0], [63.1, 35628.0], [63.2, 35643.0], [63.3, 37865.0], [63.4, 37866.0], [63.5, 37867.0], [63.6, 37868.0], [63.7, 37868.0], [63.8, 37869.0], [63.9, 37872.0], [64.0, 37873.0], [64.1, 37873.0], [64.2, 37873.0], [64.3, 37874.0], [64.4, 37876.0], [64.5, 37877.0], [64.6, 37888.0], [64.7, 37888.0], [64.8, 37889.0], [64.9, 37889.0], [65.0, 37892.0], [65.1, 37983.0], [65.2, 37990.0], [65.3, 37991.0], [65.4, 37992.0], [65.5, 37992.0], [65.6, 37993.0], [65.7, 37994.0], [65.8, 37994.0], [65.9, 37994.0], [66.0, 37994.0], [66.1, 37994.0], [66.2, 37994.0], [66.3, 37995.0], [66.4, 37995.0], [66.5, 37997.0], [66.6, 37998.0], [66.7, 37999.0], [66.8, 38000.0], [66.9, 38001.0], [67.0, 38001.0], [67.1, 38003.0], [67.2, 38004.0], [67.3, 38004.0], [67.4, 38004.0], [67.5, 38005.0], [67.6, 38006.0], [67.7, 38006.0], [67.8, 38006.0], [67.9, 38007.0], [68.0, 38007.0], [68.1, 38008.0], [68.2, 38008.0], [68.3, 38009.0], [68.4, 38009.0], [68.5, 38013.0], [68.6, 38017.0], [68.7, 38019.0], [68.8, 38019.0], [68.9, 38021.0], [69.0, 38022.0], [69.1, 38025.0], [69.2, 38042.0], [69.3, 38044.0], [69.4, 38044.0], [69.5, 38047.0], [69.6, 40870.0], [69.7, 40871.0], [69.8, 40873.0], [69.9, 40873.0], [70.0, 40874.0], [70.1, 40876.0], [70.2, 40877.0], [70.3, 40877.0], [70.4, 40878.0], [70.5, 40879.0], [70.6, 40879.0], [70.7, 40881.0], [70.8, 40881.0], [70.9, 40973.0], [71.0, 43586.0], [71.1, 43588.0], [71.2, 43590.0], [71.3, 43592.0], [71.4, 43594.0], [71.5, 43595.0], [71.6, 43596.0], [71.7, 43601.0], [71.8, 43602.0], [71.9, 43603.0], [72.0, 43604.0], [72.1, 43605.0], [72.2, 43606.0], [72.3, 43607.0], [72.4, 43620.0], [72.5, 43620.0], [72.6, 43621.0], [72.7, 43621.0], [72.8, 43621.0], [72.9, 43622.0], [73.0, 43623.0], [73.1, 43623.0], [73.2, 43624.0], [73.3, 43624.0], [73.4, 43624.0], [73.5, 43625.0], [73.6, 43625.0], [73.7, 43626.0], [73.8, 43626.0], [73.9, 43628.0], [74.0, 43628.0], [74.1, 43630.0], [74.2, 43631.0], [74.3, 43837.0], [74.4, 43838.0], [74.5, 46688.0], [74.6, 46689.0], [74.7, 46692.0], [74.8, 46771.0], [74.9, 46777.0], [75.0, 46781.0], [75.1, 46782.0], [75.2, 46783.0], [75.3, 46784.0], [75.4, 46785.0], [75.5, 46786.0], [75.6, 46787.0], [75.7, 46787.0], [75.8, 46788.0], [75.9, 46788.0], [76.0, 46788.0], [76.1, 51059.0], [76.2, 51060.0], [76.3, 51060.0], [76.4, 51091.0], [76.5, 51092.0], [76.6, 51092.0], [76.7, 51094.0], [76.8, 51095.0], [76.9, 51144.0], [77.0, 51145.0], [77.1, 51146.0], [77.2, 51147.0], [77.3, 51148.0], [77.4, 51149.0], [77.5, 51151.0], [77.6, 51151.0], [77.7, 51152.0], [77.8, 51155.0], [77.9, 51157.0], [78.0, 51157.0], [78.1, 51158.0], [78.2, 51159.0], [78.3, 51161.0], [78.4, 51161.0], [78.5, 51162.0], [78.6, 51162.0], [78.7, 51163.0], [78.8, 51164.0], [78.9, 51164.0], [79.0, 51164.0], [79.1, 51167.0], [79.2, 51168.0], [79.3, 51168.0], [79.4, 51171.0], [79.5, 51172.0], [79.6, 51172.0], [79.7, 51175.0], [79.8, 51175.0], [79.9, 51177.0], [80.0, 51178.0], [80.1, 51178.0], [80.2, 51179.0], [80.3, 51180.0], [80.4, 51180.0], [80.5, 51181.0], [80.6, 51182.0], [80.7, 51183.0], [80.8, 51183.0], [80.9, 51395.0], [81.0, 51395.0], [81.1, 51396.0], [81.2, 51399.0], [81.3, 51479.0], [81.4, 51485.0], [81.5, 51486.0], [81.6, 51489.0], [81.7, 51490.0], [81.8, 51491.0], [81.9, 51492.0], [82.0, 51493.0], [82.1, 53416.0], [82.2, 53417.0], [82.3, 53418.0], [82.4, 53419.0], [82.5, 53419.0], [82.6, 53420.0], [82.7, 53421.0], [82.8, 53421.0], [82.9, 53423.0], [83.0, 53424.0], [83.1, 53424.0], [83.2, 53424.0], [83.3, 53452.0], [83.4, 53455.0], [83.5, 53457.0], [83.6, 53459.0], [83.7, 53460.0], [83.8, 53703.0], [83.9, 53706.0], [84.0, 53707.0], [84.1, 53709.0], [84.2, 53793.0], [84.3, 53796.0], [84.4, 53797.0], [84.5, 53798.0], [84.6, 53800.0], [84.7, 53800.0], [84.8, 53800.0], [84.9, 53802.0], [85.0, 56225.0], [85.1, 56226.0], [85.2, 56227.0], [85.3, 56227.0], [85.4, 56591.0], [85.5, 56593.0], [85.6, 56593.0], [85.7, 56594.0], [85.8, 56594.0], [85.9, 56595.0], [86.0, 57417.0], [86.1, 59186.0], [86.2, 59188.0], [86.3, 59189.0], [86.4, 59190.0], [86.5, 59190.0], [86.6, 59190.0], [86.7, 59190.0], [86.8, 59190.0], [86.9, 59191.0], [87.0, 59191.0], [87.1, 59191.0], [87.2, 59192.0], [87.3, 59193.0], [87.4, 59193.0], [87.5, 59194.0], [87.6, 59194.0], [87.7, 59194.0], [87.8, 59195.0], [87.9, 59195.0], [88.0, 59195.0], [88.1, 59195.0], [88.2, 59197.0], [88.3, 59197.0], [88.4, 59197.0], [88.5, 59197.0], [88.6, 59197.0], [88.7, 59198.0], [88.8, 59198.0], [88.9, 59198.0], [89.0, 59199.0], [89.1, 59199.0], [89.2, 59199.0], [89.3, 59199.0], [89.4, 59199.0], [89.5, 59202.0], [89.6, 59208.0], [89.7, 59209.0], [89.8, 59209.0], [89.9, 59210.0], [90.0, 59211.0], [90.1, 59212.0], [90.2, 59212.0], [90.3, 59212.0], [90.4, 59213.0], [90.5, 59214.0], [90.6, 59214.0], [90.7, 59215.0], [90.8, 59215.0], [90.9, 59216.0], [91.0, 59217.0], [91.1, 59217.0], [91.2, 59217.0], [91.3, 59219.0], [91.4, 59222.0], [91.5, 59222.0], [91.6, 59223.0], [91.7, 59223.0], [91.8, 59224.0], [91.9, 59226.0], [92.0, 59227.0], [92.1, 59227.0], [92.2, 59229.0], [92.3, 59229.0], [92.4, 59231.0], [92.5, 59231.0], [92.6, 59232.0], [92.7, 59232.0], [92.8, 59233.0], [92.9, 59234.0], [93.0, 59234.0], [93.1, 59235.0], [93.2, 59236.0], [93.3, 59237.0], [93.4, 59237.0], [93.5, 59237.0], [93.6, 59602.0], [93.7, 59604.0], [93.8, 59604.0], [93.9, 59605.0], [94.0, 59607.0], [94.1, 59742.0], [94.2, 59743.0], [94.3, 59744.0], [94.4, 59745.0], [94.5, 59746.0], [94.6, 59746.0], [94.7, 59747.0], [94.8, 59748.0], [94.9, 59748.0], [95.0, 59749.0], [95.1, 59750.0], [95.2, 59750.0], [95.3, 59750.0], [95.4, 59752.0], [95.5, 59754.0], [95.6, 59754.0], [95.7, 59756.0], [95.8, 59756.0], [95.9, 59758.0], [96.0, 59758.0], [96.1, 59760.0], [96.2, 59760.0], [96.3, 59761.0], [96.4, 59762.0], [96.5, 59762.0], [96.6, 59764.0], [96.7, 59781.0], [96.8, 59782.0], [96.9, 59782.0], [97.0, 59782.0], [97.1, 59783.0], [97.2, 60266.0], [97.3, 60267.0], [97.4, 60268.0], [97.5, 60268.0], [97.6, 60269.0], [97.7, 60271.0], [97.8, 60271.0], [97.9, 60272.0], [98.0, 60272.0], [98.1, 60273.0], [98.2, 60274.0], [98.3, 60275.0], [98.4, 60276.0], [98.5, 60277.0], [98.6, 60277.0], [98.7, 60279.0], [98.8, 60280.0], [98.9, 60280.0], [99.0, 62194.0], [99.1, 62194.0], [99.2, 62195.0], [99.3, 62195.0], [99.4, 62196.0], [99.5, 62197.0], [99.6, 62228.0], [99.7, 62347.0], [99.8, 62347.0], [99.9, 62348.0]], "isOverall": false, "label": "Petición HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 64.0, "series": [{"data": [[5200.0, 14.0], [5300.0, 64.0], [5400.0, 40.0], [9100.0, 8.0], [9000.0, 8.0], [11100.0, 13.0], [11200.0, 48.0], [11400.0, 14.0], [11300.0, 4.0], [14000.0, 20.0], [14100.0, 1.0], [16800.0, 22.0], [16900.0, 19.0], [16700.0, 14.0], [17000.0, 1.0], [19500.0, 4.0], [19600.0, 11.0], [19700.0, 3.0], [19900.0, 6.0], [20000.0, 2.0], [20100.0, 2.0], [20300.0, 1.0], [20600.0, 1.0], [20700.0, 14.0], [20500.0, 2.0], [24300.0, 31.0], [24100.0, 2.0], [24400.0, 14.0], [24200.0, 18.0], [25400.0, 8.0], [25600.0, 28.0], [25700.0, 11.0], [25900.0, 14.0], [26000.0, 17.0], [26900.0, 10.0], [27100.0, 3.0], [27200.0, 4.0], [27300.0, 2.0], [29600.0, 29.0], [29500.0, 2.0], [29400.0, 6.0], [29800.0, 19.0], [30100.0, 12.0], [29700.0, 5.0], [29900.0, 3.0], [33300.0, 7.0], [33200.0, 4.0], [34900.0, 1.0], [35200.0, 1.0], [35600.0, 12.0], [35400.0, 2.0], [35300.0, 29.0], [37900.0, 17.0], [37800.0, 18.0], [38000.0, 28.0], [40900.0, 1.0], [40800.0, 13.0], [43600.0, 26.0], [43500.0, 7.0], [43800.0, 2.0], [46600.0, 3.0], [46700.0, 13.0], [51100.0, 40.0], [51000.0, 8.0], [200.0, 2.0], [51300.0, 4.0], [51400.0, 8.0], [53400.0, 18.0], [53700.0, 8.0], [53800.0, 4.0], [56500.0, 6.0], [56200.0, 4.0], [57400.0, 1.0], [59200.0, 41.0], [59100.0, 34.0], [59600.0, 5.0], [59700.0, 31.0], [60200.0, 18.0], [62100.0, 6.0], [62200.0, 1.0], [62300.0, 3.0]], "isOverall": false, "label": "Petición HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 62300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 998.0, "series": [{"data": [[0.0, 2.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 998.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.9, "minX": 1.68544062E12, "maxY": 999.5, "series": [{"data": [[1.68544074E12, 5.9], [1.68544062E12, 999.5], [1.68544068E12, 505.52530364372495]], "isOverall": false, "label": "Prueba_Rendimiento", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68544074E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 226.0, "minX": 1.0, "maxY": 62348.0, "series": [{"data": [[2.0, 62348.0], [3.0, 62347.0], [5.0, 62211.0], [7.0, 62194.5], [9.0, 62195.0], [10.0, 62196.5], [11.0, 60280.0], [12.0, 60266.0], [14.0, 60267.5], [16.0, 60268.5], [18.0, 60271.0], [19.0, 60272.0], [21.0, 60272.5], [23.0, 60274.5], [25.0, 60276.5], [26.0, 60277.0], [27.0, 60279.0], [28.0, 60280.0], [30.0, 59768.0], [33.0, 59781.0], [32.0, 59782.5], [34.0, 59782.0], [36.0, 59750.0], [38.0, 59754.0], [40.0, 59755.0], [43.0, 59758.0], [42.0, 59759.0], [45.0, 59760.0], [44.0, 59761.0], [47.0, 59762.0], [46.0, 59762.0], [49.0, 59746.0], [48.0, 59764.0], [51.0, 59747.0], [50.0, 59744.0], [53.0, 59748.0], [52.0, 59745.0], [55.0, 59750.0], [54.0, 59742.0], [57.0, 59746.0], [56.0, 59743.0], [59.0, 59749.0], [58.0, 59748.0], [63.0, 59226.0], [62.0, 59224.5], [67.0, 59198.0], [66.0, 59191.0], [65.0, 59237.0], [64.0, 59223.5], [71.0, 59222.0], [70.0, 59234.0], [69.0, 59202.0], [68.0, 59223.0], [75.0, 59217.0], [74.0, 59193.0], [73.0, 59190.0], [72.0, 59199.0], [79.0, 59191.0], [78.0, 59190.0], [77.0, 59186.0], [76.0, 59217.0], [82.0, 59195.0], [81.0, 59197.0], [80.0, 59194.0], [87.0, 59199.0], [84.0, 59198.0], [91.0, 59231.0], [90.0, 59215.0], [95.0, 59607.0], [94.0, 59234.0], [92.0, 59230.5], [99.0, 59235.0], [98.0, 59234.0], [97.0, 59233.0], [96.0, 59232.0], [103.0, 59603.333333333336], [101.0, 59605.0], [100.0, 59236.0], [107.0, 59188.0], [106.0, 59219.0], [111.0, 59190.0], [109.0, 59189.5], [115.0, 59195.0], [114.0, 59192.5], [112.0, 59192.0], [119.0, 59207.0], [118.0, 59197.0], [116.0, 59195.0], [123.0, 59204.0], [121.0, 59205.0], [127.0, 59194.0], [126.0, 59193.0], [125.0, 59212.5], [134.0, 59212.0], [133.0, 59209.5], [131.0, 59208.0], [130.0, 59200.0], [143.0, 56227.0], [140.0, 57417.0], [139.0, 59216.0], [137.0, 59214.0], [136.0, 59214.0], [151.0, 53800.0], [150.0, 56593.33333333333], [148.0, 56227.0], [147.0, 56226.0], [146.0, 56225.0], [159.0, 53751.0], [157.0, 53797.0], [156.0, 53798.0], [155.0, 53800.0], [154.0, 53800.0], [153.0, 53802.0], [152.0, 53796.0], [167.0, 53459.0], [166.0, 53457.0], [165.0, 53455.0], [164.0, 53453.0], [163.0, 53703.0], [162.0, 53579.5], [160.0, 53706.0], [175.0, 53419.5], [173.0, 53417.0], [172.0, 53418.0], [171.0, 53416.0], [170.0, 53424.0], [169.0, 53419.0], [168.0, 53460.0], [183.0, 51172.0], [182.0, 51178.0], [181.0, 51180.0], [180.0, 53424.0], [179.0, 53423.0], [178.0, 53421.0], [177.0, 53422.5], [191.0, 51175.0], [190.0, 51171.5], [188.0, 51168.0], [187.0, 51164.5], [185.0, 51168.0], [184.0, 51175.0], [198.0, 51183.0], [197.0, 51181.5], [195.0, 51179.0], [194.0, 51178.0], [193.0, 51177.0], [192.0, 51180.0], [207.0, 51439.0], [205.0, 51487.5], [203.0, 51490.0], [202.0, 51492.0], [201.0, 51493.0], [200.0, 51337.0], [214.0, 51147.0], [212.0, 51144.0], [211.0, 51395.0], [209.0, 51440.5], [223.0, 51095.0], [222.0, 51094.0], [221.0, 51164.0], [220.0, 51091.0], [219.0, 51092.0], [218.0, 51161.0], [217.0, 51158.0], [216.0, 51150.0], [230.0, 51146.0], [228.0, 51060.0], [227.0, 51059.0], [225.0, 51092.0], [224.0, 51060.0], [239.0, 51163.0], [238.0, 51161.5], [237.0, 51159.0], [236.0, 51157.0], [234.0, 51157.0], [233.0, 51155.0], [232.0, 51155.666666666664], [247.0, 46740.0], [245.0, 46788.0], [244.0, 46787.0], [243.0, 46785.0], [242.0, 46788.0], [241.0, 46786.0], [240.0, 51164.0], [255.0, 46777.0], [254.0, 46735.0], [252.0, 46777.0], [250.0, 46784.0], [249.0, 46782.0], [248.0, 46787.0], [270.0, 43605.0], [271.0, 43606.0], [269.0, 43604.0], [268.0, 43603.0], [267.0, 43602.0], [266.0, 43601.0], [265.0, 43595.5], [263.0, 43593.0], [258.0, 43838.0], [257.0, 43837.0], [256.0, 46688.0], [261.0, 43588.0], [285.0, 43624.0], [287.0, 43624.0], [284.0, 43631.0], [275.0, 43620.5], [272.0, 43607.0], [283.0, 43621.0], [282.0, 43623.0], [281.0, 43620.0], [280.0, 43621.0], [279.0, 43626.0], [278.0, 43625.0], [277.0, 43624.0], [276.0, 43622.5], [291.0, 43630.0], [302.0, 40878.5], [300.0, 40876.5], [298.0, 40874.0], [297.0, 40875.666666666664], [295.0, 40871.0], [294.0, 40870.0], [293.0, 40877.0], [290.0, 43628.0], [289.0, 43627.0], [288.0, 43625.0], [318.0, 37994.0], [319.0, 37994.0], [317.0, 37994.0], [316.0, 37992.0], [315.0, 37992.0], [314.0, 37990.0], [313.0, 37991.0], [312.0, 38009.0], [310.0, 37994.0], [304.0, 40880.0], [307.0, 37993.5], [305.0, 40973.0], [309.0, 37994.0], [308.0, 37995.0], [332.0, 38004.5], [334.0, 38007.0], [335.0, 38004.0], [333.0, 38006.0], [330.0, 38008.5], [328.0, 38014.0], [327.0, 38001.0], [320.0, 37995.0], [322.0, 37998.0], [321.0, 37997.0], [326.0, 38001.0], [325.0, 38000.0], [324.0, 37943.5], [349.0, 38042.0], [350.0, 38044.0], [348.0, 38022.0], [339.0, 38008.0], [338.0, 38007.0], [337.0, 38006.0], [336.0, 38006.0], [347.0, 38047.0], [346.0, 38021.0], [345.0, 38044.0], [344.0, 38019.0], [343.0, 38017.0], [342.0, 38014.0], [340.0, 38008.0], [367.0, 37888.0], [366.0, 37873.5], [364.0, 37876.0], [363.0, 37877.0], [362.0, 37873.0], [361.0, 37872.9], [383.0, 35357.0], [382.0, 35354.0], [381.0, 35356.0], [379.0, 35350.5], [378.0, 35350.5], [377.0, 35348.333333333336], [374.0, 35353.0], [368.0, 37936.0], [397.0, 35375.0], [399.0, 35628.0], [396.0, 35368.0], [387.0, 35361.0], [386.0, 35360.0], [385.0, 35359.0], [384.0, 35357.0], [395.0, 35366.0], [394.0, 35367.0], [393.0, 35365.0], [392.0, 35363.0], [391.0, 35362.0], [390.0, 35360.0], [389.0, 35366.0], [388.0, 35361.0], [412.0, 35458.5], [414.0, 33282.0], [415.0, 33280.0], [413.0, 34905.0], [410.0, 35615.0], [408.0, 35610.5], [406.0, 35610.0], [401.0, 35612.0], [400.0, 35415.0], [403.0, 35613.5], [402.0, 35622.0], [405.0, 35612.0], [404.0, 35469.0], [429.0, 29864.0], [430.0, 29864.0], [428.0, 29866.0], [419.0, 33366.0], [418.0, 33370.0], [417.0, 33282.0], [416.0, 33282.0], [427.0, 29869.0], [426.0, 29838.0], [425.0, 30178.0], [424.0, 33354.0], [423.0, 33377.0], [422.0, 33372.0], [420.0, 33367.0], [435.0, 29870.0], [446.0, 30141.0], [444.0, 29901.0], [443.0, 29894.5], [441.0, 29892.0], [439.0, 29880.0], [438.0, 29874.5], [436.0, 29878.0], [434.0, 29867.5], [432.0, 29868.0], [451.0, 29773.0], [463.0, 29879.333333333332], [460.0, 30137.0], [459.0, 30138.5], [457.0, 30140.0], [455.0, 30142.0], [454.0, 30145.0], [453.0, 29772.0], [452.0, 29774.0], [450.0, 30142.0], [449.0, 29776.0], [448.0, 29958.0], [479.0, 29647.0], [478.0, 29672.0], [477.0, 29654.0], [476.0, 29579.5], [474.0, 29502.0], [473.0, 29531.8], [483.0, 29653.0], [494.0, 29652.0], [492.0, 29657.0], [482.0, 29657.5], [481.0, 29649.0], [480.0, 29657.0], [491.0, 29661.0], [489.0, 29649.0], [488.0, 29660.0], [487.0, 29654.0], [486.0, 29666.0], [485.0, 29664.0], [484.0, 29659.0], [509.0, 27301.0], [510.0, 27240.0], [508.0, 26952.0], [498.0, 29664.0], [496.0, 29660.0], [507.0, 27291.0], [506.0, 27199.0], [505.0, 26966.0], [504.0, 27201.0], [501.0, 27321.0], [500.0, 29659.0], [538.0, 25663.5], [542.0, 25661.0], [543.0, 25662.0], [529.0, 26080.0], [528.0, 26070.0], [533.0, 26073.0], [531.0, 26072.0], [541.0, 25664.0], [540.0, 25659.0], [539.0, 25662.0], [536.0, 26079.0], [519.0, 26962.5], [517.0, 26952.0], [516.0, 26955.0], [515.0, 26948.0], [514.0, 26954.0], [512.0, 27116.333333333332], [527.0, 26068.5], [526.0, 26065.5], [524.0, 26066.0], [523.0, 26066.0], [522.0, 26077.0], [520.0, 26081.0], [535.0, 26077.0], [534.0, 26076.0], [569.0, 25699.0], [574.0, 25672.0], [575.0, 25716.0], [561.0, 25662.0], [563.0, 25719.0], [562.0, 25662.0], [565.0, 25704.0], [564.0, 25678.0], [573.0, 25705.5], [571.0, 25678.0], [570.0, 25707.0], [568.0, 25718.0], [550.0, 25928.0], [549.0, 25941.0], [548.0, 25927.0], [547.0, 25954.0], [546.0, 25916.0], [545.0, 25666.0], [544.0, 25664.0], [559.0, 25929.0], [558.0, 25927.0], [557.0, 25924.5], [555.0, 25942.0], [554.0, 25923.0], [553.0, 25917.0], [552.0, 25932.0], [567.0, 25673.0], [566.0, 25705.0], [600.0, 24224.0], [605.0, 24235.0], [606.0, 24236.0], [593.0, 25425.0], [604.0, 24240.0], [602.0, 24225.0], [601.0, 24225.0], [591.0, 25541.5], [576.0, 25675.0], [579.0, 25670.0], [578.0, 25694.0], [581.0, 25667.0], [580.0, 25713.0], [583.0, 25661.0], [582.0, 25659.0], [589.0, 25426.0], [588.0, 25658.0], [587.0, 25662.0], [586.0, 25662.0], [585.0, 25704.0], [584.0, 25656.0], [599.0, 24224.0], [598.0, 24228.0], [597.0, 25430.0], [595.0, 25427.0], [633.0, 24371.0], [638.0, 24365.0], [639.0, 24367.0], [624.0, 24428.5], [628.0, 24418.0], [626.0, 24424.0], [637.0, 24367.0], [636.0, 24358.5], [634.0, 24351.0], [632.0, 24375.5], [615.0, 24420.0], [614.0, 24258.0], [613.0, 24259.0], [612.0, 24259.5], [610.0, 24250.0], [608.0, 24248.5], [622.0, 24416.5], [620.0, 24324.0], [618.0, 24428.0], [617.0, 24423.0], [616.0, 24430.0], [630.0, 24155.0], [629.0, 24414.0], [666.0, 20785.0], [658.0, 24321.5], [669.0, 20783.0], [671.0, 20784.0], [656.0, 24325.5], [667.0, 20781.0], [664.0, 20781.0], [647.0, 24335.0], [646.0, 24353.0], [644.0, 24359.0], [642.0, 24366.0], [641.0, 24372.0], [640.0, 24366.0], [654.0, 24349.0], [653.0, 24317.0], [652.0, 24322.0], [651.0, 24172.0], [650.0, 24319.0], [649.0, 24324.0], [648.0, 24321.0], [663.0, 20783.0], [662.0, 24323.5], [660.0, 24320.0], [698.0, 19703.0], [690.0, 19901.0], [702.0, 19697.0], [703.0, 19631.5], [689.0, 19963.0], [688.0, 19932.0], [700.0, 19699.0], [697.0, 19652.5], [679.0, 20694.0], [678.0, 20759.5], [676.0, 20562.0], [675.0, 20568.0], [674.0, 20787.0], [673.0, 20784.0], [672.0, 20767.0], [686.0, 19903.0], [685.0, 19906.0], [684.0, 20078.5], [682.0, 20100.0], [681.0, 20169.0], [680.0, 20346.0], [695.0, 19632.0], [693.0, 19607.0], [691.0, 19795.0], [729.0, 16757.0], [723.0, 16969.5], [732.0, 16824.0], [734.0, 16776.5], [721.0, 16975.0], [720.0, 16973.0], [730.0, 16756.0], [728.0, 16831.0], [711.0, 16984.0], [710.0, 16985.0], [708.0, 19575.0], [707.0, 19630.5], [705.0, 19691.0], [719.0, 16979.0], [717.0, 16969.5], [715.0, 17001.5], [713.0, 16983.0], [712.0, 16984.0], [727.0, 16864.0], [726.0, 16965.0], [725.0, 16970.0], [762.0, 16877.0], [754.0, 16885.5], [765.0, 14059.0], [767.0, 14073.0], [752.0, 16890.0], [764.0, 16874.0], [760.0, 16902.5], [743.0, 16812.5], [741.0, 16771.0], [739.0, 16780.0], [738.0, 16820.0], [736.0, 16779.5], [751.0, 16886.0], [748.0, 16810.0], [747.0, 16860.0], [746.0, 16769.0], [745.0, 16816.0], [758.0, 16883.5], [757.0, 16907.0], [756.0, 16882.0], [797.0, 11367.0], [799.0, 11426.5], [796.0, 11384.5], [794.0, 11353.0], [792.0, 11423.5], [775.0, 14088.0], [773.0, 14067.5], [771.0, 14070.5], [769.0, 14069.5], [768.0, 14071.0], [783.0, 14044.0], [782.0, 14045.0], [781.0, 14047.0], [780.0, 14049.0], [779.0, 14059.0], [778.0, 14061.0], [777.0, 14062.5], [790.0, 11432.5], [788.0, 11436.0], [787.0, 11423.0], [785.0, 14043.0], [830.0, 11219.0], [831.0, 11217.0], [828.0, 11197.0], [826.0, 11214.0], [825.0, 11179.0], [824.0, 11180.5], [814.0, 11224.5], [803.0, 11420.5], [801.0, 11424.0], [805.0, 11246.0], [804.0, 11247.0], [807.0, 11237.0], [806.0, 11186.0], [812.0, 11204.0], [810.0, 11218.0], [809.0, 11223.0], [808.0, 11161.0], [822.0, 11200.5], [820.0, 11214.0], [818.0, 11266.0], [816.0, 11247.5], [862.0, 11255.0], [863.0, 11254.0], [851.0, 11270.5], [849.0, 11274.5], [861.0, 11257.5], [859.0, 11260.0], [857.0, 11263.0], [856.0, 11172.0], [847.0, 11270.5], [833.0, 11221.0], [832.0, 11227.0], [835.0, 11235.0], [834.0, 11227.0], [838.0, 11236.0], [837.0, 11237.0], [845.0, 11274.5], [843.0, 11276.5], [841.0, 11269.5], [855.0, 11264.0], [854.0, 11154.0], [853.0, 11267.0], [852.0, 11268.0], [884.0, 5441.0], [892.0, 5375.0], [894.0, 5367.5], [880.0, 9101.0], [883.0, 5406.5], [881.0, 5462.0], [891.0, 5453.0], [890.0, 5370.0], [888.0, 5394.0], [870.0, 9145.0], [864.0, 11206.5], [879.0, 9098.0], [878.0, 9092.0], [877.0, 9097.9], [872.0, 9113.0], [887.0, 5440.0], [886.0, 5393.0], [885.0, 5437.0], [920.0, 5455.0], [924.0, 5453.5], [926.0, 5389.0], [912.0, 5459.0], [914.0, 5454.0], [913.0, 5459.0], [923.0, 5458.0], [922.0, 5454.0], [921.0, 5354.0], [911.0, 5337.0], [897.0, 5367.0], [896.0, 5390.0], [900.0, 5404.5], [899.0, 5326.0], [903.0, 5366.0], [902.0, 5368.0], [910.0, 5365.0], [909.0, 5448.0], [907.0, 5448.0], [906.0, 5357.0], [905.0, 5450.0], [904.0, 5364.0], [919.0, 5368.0], [918.0, 5460.0], [916.0, 5412.0], [915.0, 5447.0], [947.0, 5390.0], [959.0, 5319.0], [957.0, 5359.0], [955.0, 5401.5], [953.0, 5392.0], [943.0, 5398.0], [928.0, 5389.0], [932.0, 5403.0], [930.0, 5343.5], [935.0, 5394.0], [934.0, 5390.5], [942.0, 5405.0], [940.0, 5395.5], [938.0, 5374.0], [951.0, 5384.0], [950.0, 5385.0], [949.0, 5401.0], [945.0, 5393.0], [988.0, 5290.0], [990.0, 5287.5], [977.0, 5381.5], [987.0, 5297.0], [986.0, 5309.0], [985.0, 5301.0], [984.0, 5293.0], [975.0, 5357.333333333333], [961.0, 5313.0], [960.0, 5432.0], [963.0, 5429.0], [962.0, 5314.0], [967.0, 5373.5], [964.0, 5317.0], [973.0, 5371.5], [971.0, 5402.0], [969.0, 5375.75], [983.0, 5334.0], [982.0, 5337.0], [980.0, 5321.5], [979.0, 5412.5], [1000.0, 226.0], [999.0, 247.0], [998.0, 5291.5], [997.0, 5296.0], [995.0, 5282.0], [994.0, 5288.0], [992.0, 5285.0], [1.0, 62347.0]], "isOverall": false, "label": "Petición HTTP", "isController": false}, {"data": [[501.51300000000117, 31009.773999999998]], "isOverall": false, "label": "Petición HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4.0, "minX": 1.68544062E12, "maxY": 90056.2, "series": [{"data": [[1.68544074E12, 911.5], [1.68544062E12, 182.3], [1.68544068E12, 90056.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68544074E12, 20.0], [1.68544062E12, 4.0], [1.68544068E12, 1976.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68544074E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 236.5, "minX": 1.68544062E12, "maxY": 62244.1, "series": [{"data": [[1.68544074E12, 62244.1], [1.68544062E12, 236.5], [1.68544068E12, 30755.931174089037]], "isOverall": false, "label": "Petición HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68544074E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 191.0, "minX": 1.68544062E12, "maxY": 62244.1, "series": [{"data": [[1.68544074E12, 62244.1], [1.68544062E12, 191.0], [1.68544068E12, 30755.60829959516]], "isOverall": false, "label": "Petición HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68544074E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3.5, "minX": 1.68544062E12, "maxY": 94.95850202429146, "series": [{"data": [[1.68544074E12, 18.3], [1.68544062E12, 3.5], [1.68544068E12, 94.95850202429146]], "isOverall": false, "label": "Petición HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68544074E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 226.0, "minX": 1.68544062E12, "maxY": 62348.0, "series": [{"data": [[1.68544074E12, 62348.0], [1.68544062E12, 247.0], [1.68544068E12, 60280.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68544074E12, 62347.9], [1.68544062E12, 247.0], [1.68544068E12, 59199.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68544074E12, 62348.0], [1.68544062E12, 247.0], [1.68544068E12, 60272.11]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68544074E12, 62348.0], [1.68544062E12, 247.0], [1.68544068E12, 59681.24999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68544074E12, 62194.0], [1.68544062E12, 226.0], [1.68544068E12, 5246.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68544074E12, 62196.5], [1.68544062E12, 236.5], [1.68544068E12, 27240.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68544074E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 236.5, "minX": 1.0, "maxY": 59394.5, "series": [{"data": [[2.0, 236.5], [35.0, 35443.5], [10.0, 59394.5], [11.0, 33366.0], [44.0, 35361.5], [56.0, 16882.0], [14.0, 40877.0], [61.0, 25673.0], [60.0, 51165.5], [63.0, 37995.0], [16.0, 27917.0], [65.0, 24335.0], [1.0, 34905.0], [18.0, 40528.0], [79.0, 11260.0], [76.0, 29772.0], [21.0, 14063.0], [111.0, 59223.0], [28.0, 19698.0], [118.0, 5380.5], [30.0, 53456.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 118.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 191.0, "minX": 1.0, "maxY": 59394.5, "series": [{"data": [[2.0, 191.0], [35.0, 35443.5], [10.0, 59394.5], [11.0, 33366.0], [44.0, 35361.5], [56.0, 16882.0], [14.0, 40877.0], [61.0, 25673.0], [60.0, 51165.5], [63.0, 37995.0], [16.0, 27917.0], [65.0, 24326.0], [1.0, 34905.0], [18.0, 40528.0], [79.0, 11260.0], [76.0, 29772.0], [21.0, 14063.0], [111.0, 59223.0], [28.0, 19698.0], [118.0, 5376.0], [30.0, 53456.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 118.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.68544062E12, "maxY": 16.666666666666668, "series": [{"data": [[1.68544062E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68544062E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68544062E12, "maxY": 16.466666666666665, "series": [{"data": [[1.68544074E12, 0.16666666666666666], [1.68544062E12, 0.03333333333333333], [1.68544068E12, 16.466666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68544074E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68544062E12, "maxY": 16.466666666666665, "series": [{"data": [[1.68544074E12, 0.16666666666666666], [1.68544062E12, 0.03333333333333333], [1.68544068E12, 16.466666666666665]], "isOverall": false, "label": "Petición HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68544074E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68544062E12, "maxY": 16.466666666666665, "series": [{"data": [[1.68544074E12, 0.16666666666666666], [1.68544062E12, 0.03333333333333333], [1.68544068E12, 16.466666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68544074E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

